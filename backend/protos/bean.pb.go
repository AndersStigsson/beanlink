// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: protos/bean.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Roast int32

const (
	// UNKOWN
	Roast_UNKNOWN_ROAST Roast = 0
	// LIGHT
	Roast_CINNAMON_ROAST       Roast = 1
	Roast_AMERICAN_ROAST       Roast = 2
	Roast_NEW_ENGLAND_ROAST    Roast = 3
	Roast_HALF_CITY_ROAST      Roast = 4
	Roast_MODERATE_LIGHT_ROAST Roast = 5
	// MEDIUM
	Roast_CITY_ROAST      Roast = 6
	Roast_CITY_PLUS_ROAST Roast = 7
	Roast_FULL_CITY_ROAST Roast = 8
	// DARK
	Roast_FULL_CITY_PLUS_ROAST Roast = 9
	Roast_ITALIAN_ROAST        Roast = 10
	Roast_VIEANNA_ROAST        Roast = 11
	Roast_FRENCH_ROAST         Roast = 12
	Roast_CUSTOM_ROAST         Roast = 13
)

// Enum value maps for Roast.
var (
	Roast_name = map[int32]string{
		0:  "UNKNOWN_ROAST",
		1:  "CINNAMON_ROAST",
		2:  "AMERICAN_ROAST",
		3:  "NEW_ENGLAND_ROAST",
		4:  "HALF_CITY_ROAST",
		5:  "MODERATE_LIGHT_ROAST",
		6:  "CITY_ROAST",
		7:  "CITY_PLUS_ROAST",
		8:  "FULL_CITY_ROAST",
		9:  "FULL_CITY_PLUS_ROAST",
		10: "ITALIAN_ROAST",
		11: "VIEANNA_ROAST",
		12: "FRENCH_ROAST",
		13: "CUSTOM_ROAST",
	}
	Roast_value = map[string]int32{
		"UNKNOWN_ROAST":        0,
		"CINNAMON_ROAST":       1,
		"AMERICAN_ROAST":       2,
		"NEW_ENGLAND_ROAST":    3,
		"HALF_CITY_ROAST":      4,
		"MODERATE_LIGHT_ROAST": 5,
		"CITY_ROAST":           6,
		"CITY_PLUS_ROAST":      7,
		"FULL_CITY_ROAST":      8,
		"FULL_CITY_PLUS_ROAST": 9,
		"ITALIAN_ROAST":        10,
		"VIEANNA_ROAST":        11,
		"FRENCH_ROAST":         12,
		"CUSTOM_ROAST":         13,
	}
)

func (x Roast) Enum() *Roast {
	p := new(Roast)
	*p = x
	return p
}

func (x Roast) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Roast) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_bean_proto_enumTypes[0].Descriptor()
}

func (Roast) Type() protoreflect.EnumType {
	return &file_protos_bean_proto_enumTypes[0]
}

func (x Roast) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Roast.Descriptor instead.
func (Roast) EnumDescriptor() ([]byte, []int) {
	return file_protos_bean_proto_rawDescGZIP(), []int{0}
}

type BeanMix int32

const (
	BeanMix_UNKNOWN_BEAN_MIX BeanMix = 0
	BeanMix_SINGLE_ORIGIN    BeanMix = 1
	BeanMix_BLEND            BeanMix = 2
)

// Enum value maps for BeanMix.
var (
	BeanMix_name = map[int32]string{
		0: "UNKNOWN_BEAN_MIX",
		1: "SINGLE_ORIGIN",
		2: "BLEND",
	}
	BeanMix_value = map[string]int32{
		"UNKNOWN_BEAN_MIX": 0,
		"SINGLE_ORIGIN":    1,
		"BLEND":            2,
	}
)

func (x BeanMix) Enum() *BeanMix {
	p := new(BeanMix)
	*p = x
	return p
}

func (x BeanMix) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BeanMix) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_bean_proto_enumTypes[1].Descriptor()
}

func (BeanMix) Type() protoreflect.EnumType {
	return &file_protos_bean_proto_enumTypes[1]
}

func (x BeanMix) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BeanMix.Descriptor instead.
func (BeanMix) EnumDescriptor() ([]byte, []int) {
	return file_protos_bean_proto_rawDescGZIP(), []int{1}
}

type BeanRoastingType int32

const (
	BeanRoastingType_UNKNOWN_BEAN_ROASTING_TYPE BeanRoastingType = 0
	BeanRoastingType_FILTER                     BeanRoastingType = 1
	BeanRoastingType_ESPRESSO                   BeanRoastingType = 2
	BeanRoastingType_OMNI                       BeanRoastingType = 3
)

// Enum value maps for BeanRoastingType.
var (
	BeanRoastingType_name = map[int32]string{
		0: "UNKNOWN_BEAN_ROASTING_TYPE",
		1: "FILTER",
		2: "ESPRESSO",
		3: "OMNI",
	}
	BeanRoastingType_value = map[string]int32{
		"UNKNOWN_BEAN_ROASTING_TYPE": 0,
		"FILTER":                     1,
		"ESPRESSO":                   2,
		"OMNI":                       3,
	}
)

func (x BeanRoastingType) Enum() *BeanRoastingType {
	p := new(BeanRoastingType)
	*p = x
	return p
}

func (x BeanRoastingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BeanRoastingType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_bean_proto_enumTypes[2].Descriptor()
}

func (BeanRoastingType) Type() protoreflect.EnumType {
	return &file_protos_bean_proto_enumTypes[2]
}

func (x BeanRoastingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BeanRoastingType.Descriptor instead.
func (BeanRoastingType) EnumDescriptor() ([]byte, []int) {
	return file_protos_bean_proto_rawDescGZIP(), []int{2}
}

type BeanProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BuyDate              *string               `protobuf:"bytes,2,opt,name=buyDate,proto3,oneof" json:"buyDate,omitempty"`
	RoastingDate         *string               `protobuf:"bytes,3,opt,name=roastingDate,proto3,oneof" json:"roastingDate,omitempty"`
	Note                 *string               `protobuf:"bytes,4,opt,name=note,proto3,oneof" json:"note,omitempty"`
	Roaster              *string               `protobuf:"bytes,5,opt,name=roaster,proto3,oneof" json:"roaster,omitempty"`
	Config               *Config               `protobuf:"bytes,6,opt,name=config,proto3,oneof" json:"config,omitempty"`
	Roast                *Roast                `protobuf:"varint,7,opt,name=roast,proto3,enum=protos.Roast,oneof" json:"roast,omitempty"`
	RoastRange           *uint64               `protobuf:"varint,8,opt,name=roast_range,json=roastRange,proto3,oneof" json:"roast_range,omitempty"`
	BeanMix              *BeanMix              `protobuf:"varint,9,opt,name=beanMix,proto3,enum=protos.BeanMix,oneof" json:"beanMix,omitempty"`
	RoastCustom          *string               `protobuf:"bytes,10,opt,name=roast_custom,json=roastCustom,proto3,oneof" json:"roast_custom,omitempty"`
	Aromatics            *string               `protobuf:"bytes,11,opt,name=aromatics,proto3,oneof" json:"aromatics,omitempty"`
	Weight               *uint64               `protobuf:"varint,12,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Finished             *bool                 `protobuf:"varint,13,opt,name=finished,proto3,oneof" json:"finished,omitempty"`
	Cost                 *uint64               `protobuf:"varint,14,opt,name=cost,proto3,oneof" json:"cost,omitempty"`
	Attachments          []string              `protobuf:"bytes,15,rep,name=attachments,proto3" json:"attachments,omitempty"`
	CuppingPoints        *string               `protobuf:"bytes,16,opt,name=cupping_points,json=cuppingPoints,proto3,oneof" json:"cupping_points,omitempty"`
	Decaffeinated        *bool                 `protobuf:"varint,17,opt,name=decaffeinated,proto3,oneof" json:"decaffeinated,omitempty"`
	Url                  *string               `protobuf:"bytes,18,opt,name=url,proto3,oneof" json:"url,omitempty"`
	EanArticleNumber     *string               `protobuf:"bytes,19,opt,name=ean_article_number,json=eanArticleNumber,proto3,oneof" json:"ean_article_number,omitempty"`
	Rating               *uint32               `protobuf:"varint,20,opt,name=rating,proto3,oneof" json:"rating,omitempty"`
	BeanInformation      []*BeanInformation    `protobuf:"bytes,21,rep,name=bean_information,json=beanInformation,proto3" json:"bean_information,omitempty"`
	BeanRoastingType     *BeanRoastingType     `protobuf:"varint,22,opt,name=bean_roasting_type,json=beanRoastingType,proto3,enum=protos.BeanRoastingType,oneof" json:"bean_roasting_type,omitempty"`
	BeanRoastInformation *BeanRoastInformation `protobuf:"bytes,23,opt,name=bean_roast_information,json=beanRoastInformation,proto3,oneof" json:"bean_roast_information,omitempty"`
	QrCode               *string               `protobuf:"bytes,24,opt,name=qr_code,json=qrCode,proto3,oneof" json:"qr_code,omitempty"`
	Favourite            *bool                 `protobuf:"varint,25,opt,name=favourite,proto3,oneof" json:"favourite,omitempty"`
	Shared               *bool                 `protobuf:"varint,26,opt,name=shared,proto3,oneof" json:"shared,omitempty"`
	Cupping              *ICupping             `protobuf:"bytes,27,opt,name=cupping,proto3,oneof" json:"cupping,omitempty"`
	CuppedFlavor         *IFlavor              `protobuf:"bytes,28,opt,name=cupped_flavor,json=cuppedFlavor,proto3,oneof" json:"cupped_flavor,omitempty"`
}

func (x *BeanProto) Reset() {
	*x = BeanProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_bean_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeanProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeanProto) ProtoMessage() {}

func (x *BeanProto) ProtoReflect() protoreflect.Message {
	mi := &file_protos_bean_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeanProto.ProtoReflect.Descriptor instead.
func (*BeanProto) Descriptor() ([]byte, []int) {
	return file_protos_bean_proto_rawDescGZIP(), []int{0}
}

func (x *BeanProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BeanProto) GetBuyDate() string {
	if x != nil && x.BuyDate != nil {
		return *x.BuyDate
	}
	return ""
}

func (x *BeanProto) GetRoastingDate() string {
	if x != nil && x.RoastingDate != nil {
		return *x.RoastingDate
	}
	return ""
}

func (x *BeanProto) GetNote() string {
	if x != nil && x.Note != nil {
		return *x.Note
	}
	return ""
}

func (x *BeanProto) GetRoaster() string {
	if x != nil && x.Roaster != nil {
		return *x.Roaster
	}
	return ""
}

func (x *BeanProto) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *BeanProto) GetRoast() Roast {
	if x != nil && x.Roast != nil {
		return *x.Roast
	}
	return Roast_UNKNOWN_ROAST
}

func (x *BeanProto) GetRoastRange() uint64 {
	if x != nil && x.RoastRange != nil {
		return *x.RoastRange
	}
	return 0
}

func (x *BeanProto) GetBeanMix() BeanMix {
	if x != nil && x.BeanMix != nil {
		return *x.BeanMix
	}
	return BeanMix_UNKNOWN_BEAN_MIX
}

func (x *BeanProto) GetRoastCustom() string {
	if x != nil && x.RoastCustom != nil {
		return *x.RoastCustom
	}
	return ""
}

func (x *BeanProto) GetAromatics() string {
	if x != nil && x.Aromatics != nil {
		return *x.Aromatics
	}
	return ""
}

func (x *BeanProto) GetWeight() uint64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *BeanProto) GetFinished() bool {
	if x != nil && x.Finished != nil {
		return *x.Finished
	}
	return false
}

func (x *BeanProto) GetCost() uint64 {
	if x != nil && x.Cost != nil {
		return *x.Cost
	}
	return 0
}

func (x *BeanProto) GetAttachments() []string {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *BeanProto) GetCuppingPoints() string {
	if x != nil && x.CuppingPoints != nil {
		return *x.CuppingPoints
	}
	return ""
}

func (x *BeanProto) GetDecaffeinated() bool {
	if x != nil && x.Decaffeinated != nil {
		return *x.Decaffeinated
	}
	return false
}

func (x *BeanProto) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *BeanProto) GetEanArticleNumber() string {
	if x != nil && x.EanArticleNumber != nil {
		return *x.EanArticleNumber
	}
	return ""
}

func (x *BeanProto) GetRating() uint32 {
	if x != nil && x.Rating != nil {
		return *x.Rating
	}
	return 0
}

func (x *BeanProto) GetBeanInformation() []*BeanInformation {
	if x != nil {
		return x.BeanInformation
	}
	return nil
}

func (x *BeanProto) GetBeanRoastingType() BeanRoastingType {
	if x != nil && x.BeanRoastingType != nil {
		return *x.BeanRoastingType
	}
	return BeanRoastingType_UNKNOWN_BEAN_ROASTING_TYPE
}

func (x *BeanProto) GetBeanRoastInformation() *BeanRoastInformation {
	if x != nil {
		return x.BeanRoastInformation
	}
	return nil
}

func (x *BeanProto) GetQrCode() string {
	if x != nil && x.QrCode != nil {
		return *x.QrCode
	}
	return ""
}

func (x *BeanProto) GetFavourite() bool {
	if x != nil && x.Favourite != nil {
		return *x.Favourite
	}
	return false
}

func (x *BeanProto) GetShared() bool {
	if x != nil && x.Shared != nil {
		return *x.Shared
	}
	return false
}

func (x *BeanProto) GetCupping() *ICupping {
	if x != nil {
		return x.Cupping
	}
	return nil
}

func (x *BeanProto) GetCuppedFlavor() *IFlavor {
	if x != nil {
		return x.CuppedFlavor
	}
	return nil
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid          string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	UnixTimestamp uint64 `protobuf:"varint,2,opt,name=unix_timestamp,json=unixTimestamp,proto3" json:"unix_timestamp,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_bean_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_protos_bean_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_protos_bean_proto_rawDescGZIP(), []int{1}
}

func (x *Config) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Config) GetUnixTimestamp() uint64 {
	if x != nil {
		return x.UnixTimestamp
	}
	return 0
}

type BeanInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country         *string `protobuf:"bytes,1,opt,name=country,proto3,oneof" json:"country,omitempty"`
	Region          *string `protobuf:"bytes,2,opt,name=region,proto3,oneof" json:"region,omitempty"`
	Farm            *string `protobuf:"bytes,3,opt,name=farm,proto3,oneof" json:"farm,omitempty"`
	Farmer          *string `protobuf:"bytes,4,opt,name=farmer,proto3,oneof" json:"farmer,omitempty"`
	Elevation       *string `protobuf:"bytes,5,opt,name=elevation,proto3,oneof" json:"elevation,omitempty"`
	HarvestTime     *string `protobuf:"bytes,6,opt,name=harvest_time,json=harvestTime,proto3,oneof" json:"harvest_time,omitempty"`
	Variety         *string `protobuf:"bytes,7,opt,name=variety,proto3,oneof" json:"variety,omitempty"`
	Processing      *string `protobuf:"bytes,8,opt,name=processing,proto3,oneof" json:"processing,omitempty"`
	Certification   *string `protobuf:"bytes,9,opt,name=certification,proto3,oneof" json:"certification,omitempty"`
	Percentage      *uint32 `protobuf:"varint,10,opt,name=percentage,proto3,oneof" json:"percentage,omitempty"`
	PurchasingPrice *uint32 `protobuf:"varint,11,opt,name=purchasing_price,json=purchasingPrice,proto3,oneof" json:"purchasing_price,omitempty"`
	FobPrice        *uint32 `protobuf:"varint,12,opt,name=fob_price,json=fobPrice,proto3,oneof" json:"fob_price,omitempty"`
}

func (x *BeanInformation) Reset() {
	*x = BeanInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_bean_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeanInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeanInformation) ProtoMessage() {}

func (x *BeanInformation) ProtoReflect() protoreflect.Message {
	mi := &file_protos_bean_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeanInformation.ProtoReflect.Descriptor instead.
func (*BeanInformation) Descriptor() ([]byte, []int) {
	return file_protos_bean_proto_rawDescGZIP(), []int{2}
}

func (x *BeanInformation) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *BeanInformation) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *BeanInformation) GetFarm() string {
	if x != nil && x.Farm != nil {
		return *x.Farm
	}
	return ""
}

func (x *BeanInformation) GetFarmer() string {
	if x != nil && x.Farmer != nil {
		return *x.Farmer
	}
	return ""
}

func (x *BeanInformation) GetElevation() string {
	if x != nil && x.Elevation != nil {
		return *x.Elevation
	}
	return ""
}

func (x *BeanInformation) GetHarvestTime() string {
	if x != nil && x.HarvestTime != nil {
		return *x.HarvestTime
	}
	return ""
}

func (x *BeanInformation) GetVariety() string {
	if x != nil && x.Variety != nil {
		return *x.Variety
	}
	return ""
}

func (x *BeanInformation) GetProcessing() string {
	if x != nil && x.Processing != nil {
		return *x.Processing
	}
	return ""
}

func (x *BeanInformation) GetCertification() string {
	if x != nil && x.Certification != nil {
		return *x.Certification
	}
	return ""
}

func (x *BeanInformation) GetPercentage() uint32 {
	if x != nil && x.Percentage != nil {
		return *x.Percentage
	}
	return 0
}

func (x *BeanInformation) GetPurchasingPrice() uint32 {
	if x != nil && x.PurchasingPrice != nil {
		return *x.PurchasingPrice
	}
	return 0
}

func (x *BeanInformation) GetFobPrice() uint32 {
	if x != nil && x.FobPrice != nil {
		return *x.FobPrice
	}
	return 0
}

type BeanRoastInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropTemperature        *uint32 `protobuf:"varint,1,opt,name=drop_temperature,json=dropTemperature,proto3,oneof" json:"drop_temperature,omitempty"`
	RoastLength            *uint64 `protobuf:"varint,2,opt,name=roast_length,json=roastLength,proto3,oneof" json:"roast_length,omitempty"`
	RoasterMachine         *string `protobuf:"bytes,3,opt,name=roaster_machine,json=roasterMachine,proto3,oneof" json:"roaster_machine,omitempty"`
	GreenBeanWeight        *uint64 `protobuf:"varint,4,opt,name=green_bean_weight,json=greenBeanWeight,proto3,oneof" json:"green_bean_weight,omitempty"`
	OutsideTemperature     *uint32 `protobuf:"varint,5,opt,name=outside_temperature,json=outsideTemperature,proto3,oneof" json:"outside_temperature,omitempty"`
	Humidity               *uint32 `protobuf:"varint,6,opt,name=humidity,proto3,oneof" json:"humidity,omitempty"`
	BeanUuid               *string `protobuf:"bytes,7,opt,name=bean_uuid,json=beanUuid,proto3,oneof" json:"bean_uuid,omitempty"`
	FirstCrackMinute       *uint32 `protobuf:"varint,8,opt,name=first_crack_minute,json=firstCrackMinute,proto3,oneof" json:"first_crack_minute,omitempty"`
	FirstCrackTemperature  *uint32 `protobuf:"varint,9,opt,name=first_crack_temperature,json=firstCrackTemperature,proto3,oneof" json:"first_crack_temperature,omitempty"`
	SecondCrackMinute      *uint32 `protobuf:"varint,10,opt,name=second_crack_minute,json=secondCrackMinute,proto3,oneof" json:"second_crack_minute,omitempty"`
	SecondCrackTemperature *uint32 `protobuf:"varint,11,opt,name=second_crack_temperature,json=secondCrackTemperature,proto3,oneof" json:"second_crack_temperature,omitempty"`
}

func (x *BeanRoastInformation) Reset() {
	*x = BeanRoastInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_bean_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeanRoastInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeanRoastInformation) ProtoMessage() {}

func (x *BeanRoastInformation) ProtoReflect() protoreflect.Message {
	mi := &file_protos_bean_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeanRoastInformation.ProtoReflect.Descriptor instead.
func (*BeanRoastInformation) Descriptor() ([]byte, []int) {
	return file_protos_bean_proto_rawDescGZIP(), []int{3}
}

func (x *BeanRoastInformation) GetDropTemperature() uint32 {
	if x != nil && x.DropTemperature != nil {
		return *x.DropTemperature
	}
	return 0
}

func (x *BeanRoastInformation) GetRoastLength() uint64 {
	if x != nil && x.RoastLength != nil {
		return *x.RoastLength
	}
	return 0
}

func (x *BeanRoastInformation) GetRoasterMachine() string {
	if x != nil && x.RoasterMachine != nil {
		return *x.RoasterMachine
	}
	return ""
}

func (x *BeanRoastInformation) GetGreenBeanWeight() uint64 {
	if x != nil && x.GreenBeanWeight != nil {
		return *x.GreenBeanWeight
	}
	return 0
}

func (x *BeanRoastInformation) GetOutsideTemperature() uint32 {
	if x != nil && x.OutsideTemperature != nil {
		return *x.OutsideTemperature
	}
	return 0
}

func (x *BeanRoastInformation) GetHumidity() uint32 {
	if x != nil && x.Humidity != nil {
		return *x.Humidity
	}
	return 0
}

func (x *BeanRoastInformation) GetBeanUuid() string {
	if x != nil && x.BeanUuid != nil {
		return *x.BeanUuid
	}
	return ""
}

func (x *BeanRoastInformation) GetFirstCrackMinute() uint32 {
	if x != nil && x.FirstCrackMinute != nil {
		return *x.FirstCrackMinute
	}
	return 0
}

func (x *BeanRoastInformation) GetFirstCrackTemperature() uint32 {
	if x != nil && x.FirstCrackTemperature != nil {
		return *x.FirstCrackTemperature
	}
	return 0
}

func (x *BeanRoastInformation) GetSecondCrackMinute() uint32 {
	if x != nil && x.SecondCrackMinute != nil {
		return *x.SecondCrackMinute
	}
	return 0
}

func (x *BeanRoastInformation) GetSecondCrackTemperature() uint32 {
	if x != nil && x.SecondCrackTemperature != nil {
		return *x.SecondCrackTemperature
	}
	return 0
}

type ICupping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DryFragrance      *uint64 `protobuf:"varint,1,opt,name=dry_fragrance,json=dryFragrance,proto3,oneof" json:"dry_fragrance,omitempty"`
	WetAroma          *uint64 `protobuf:"varint,2,opt,name=wet_aroma,json=wetAroma,proto3,oneof" json:"wet_aroma,omitempty"`
	Brightness        *uint64 `protobuf:"varint,3,opt,name=brightness,proto3,oneof" json:"brightness,omitempty"`
	Flavor            *uint64 `protobuf:"varint,4,opt,name=flavor,proto3,oneof" json:"flavor,omitempty"`
	Body              *uint64 `protobuf:"varint,5,opt,name=body,proto3,oneof" json:"body,omitempty"`
	Finish            *uint64 `protobuf:"varint,6,opt,name=finish,proto3,oneof" json:"finish,omitempty"`
	Sweetness         *uint64 `protobuf:"varint,7,opt,name=sweetness,proto3,oneof" json:"sweetness,omitempty"`
	CleanCup          *uint64 `protobuf:"varint,8,opt,name=clean_cup,json=cleanCup,proto3,oneof" json:"clean_cup,omitempty"`
	Complexity        *uint64 `protobuf:"varint,9,opt,name=complexity,proto3,oneof" json:"complexity,omitempty"`
	Uniformity        *uint64 `protobuf:"varint,10,opt,name=uniformity,proto3,oneof" json:"uniformity,omitempty"`
	CuppersCorrection *uint64 `protobuf:"varint,11,opt,name=cuppers_correction,json=cuppersCorrection,proto3,oneof" json:"cuppers_correction,omitempty"`
}

func (x *ICupping) Reset() {
	*x = ICupping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_bean_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICupping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICupping) ProtoMessage() {}

func (x *ICupping) ProtoReflect() protoreflect.Message {
	mi := &file_protos_bean_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICupping.ProtoReflect.Descriptor instead.
func (*ICupping) Descriptor() ([]byte, []int) {
	return file_protos_bean_proto_rawDescGZIP(), []int{4}
}

func (x *ICupping) GetDryFragrance() uint64 {
	if x != nil && x.DryFragrance != nil {
		return *x.DryFragrance
	}
	return 0
}

func (x *ICupping) GetWetAroma() uint64 {
	if x != nil && x.WetAroma != nil {
		return *x.WetAroma
	}
	return 0
}

func (x *ICupping) GetBrightness() uint64 {
	if x != nil && x.Brightness != nil {
		return *x.Brightness
	}
	return 0
}

func (x *ICupping) GetFlavor() uint64 {
	if x != nil && x.Flavor != nil {
		return *x.Flavor
	}
	return 0
}

func (x *ICupping) GetBody() uint64 {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return 0
}

func (x *ICupping) GetFinish() uint64 {
	if x != nil && x.Finish != nil {
		return *x.Finish
	}
	return 0
}

func (x *ICupping) GetSweetness() uint64 {
	if x != nil && x.Sweetness != nil {
		return *x.Sweetness
	}
	return 0
}

func (x *ICupping) GetCleanCup() uint64 {
	if x != nil && x.CleanCup != nil {
		return *x.CleanCup
	}
	return 0
}

func (x *ICupping) GetComplexity() uint64 {
	if x != nil && x.Complexity != nil {
		return *x.Complexity
	}
	return 0
}

func (x *ICupping) GetUniformity() uint64 {
	if x != nil && x.Uniformity != nil {
		return *x.Uniformity
	}
	return 0
}

func (x *ICupping) GetCuppersCorrection() uint64 {
	if x != nil && x.CuppersCorrection != nil {
		return *x.CuppersCorrection
	}
	return 0
}

type IFlavor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredefinedFlavors []uint64 `protobuf:"varint,1,rep,packed,name=predefined_flavors,json=predefinedFlavors,proto3" json:"predefined_flavors,omitempty"`
	CustomFlavors     []string `protobuf:"bytes,2,rep,name=custom_flavors,json=customFlavors,proto3" json:"custom_flavors,omitempty"`
}

func (x *IFlavor) Reset() {
	*x = IFlavor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_bean_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IFlavor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IFlavor) ProtoMessage() {}

func (x *IFlavor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_bean_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IFlavor.ProtoReflect.Descriptor instead.
func (*IFlavor) Descriptor() ([]byte, []int) {
	return file_protos_bean_proto_rawDescGZIP(), []int{5}
}

func (x *IFlavor) GetPredefinedFlavors() []uint64 {
	if x != nil {
		return x.PredefinedFlavors
	}
	return nil
}

func (x *IFlavor) GetCustomFlavors() []string {
	if x != nil {
		return x.CustomFlavors
	}
	return nil
}

var File_protos_bean_proto protoreflect.FileDescriptor

var file_protos_bean_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x65, 0x61, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0xe9, 0x0b, 0x0a, 0x09,
	0x42, 0x65, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x07, 0x62, 0x75, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x62, 0x75, 0x79, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c,
	0x72, 0x6f, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x72, 0x6f, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x72, 0x6f, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x07, 0x72, 0x6f, 0x61, 0x73, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x04, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x6f,
	0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x6f, 0x61, 0x73, 0x74, 0x48, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x61, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x0a, 0x72, 0x6f, 0x61,
	0x73, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x07, 0x62, 0x65,
	0x61, 0x6e, 0x4d, 0x69, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x65, 0x61, 0x6e, 0x4d, 0x69, 0x78, 0x48, 0x07, 0x52, 0x07,
	0x62, 0x65, 0x61, 0x6e, 0x4d, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x6f,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x08, 0x52, 0x0b, 0x72, 0x6f, 0x61, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x09, 0x61, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0a, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a,
	0x0a, 0x0e, 0x63, 0x75, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x64, 0x65,
	0x63, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0e, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x61, 0x66, 0x66, 0x65, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0f, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12,
	0x65, 0x61, 0x6e, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x10, 0x65, 0x61, 0x6e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x11, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x10,
	0x62, 0x65, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x42, 0x65, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x62, 0x65, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4b, 0x0a, 0x12, 0x62, 0x65, 0x61, 0x6e, 0x5f, 0x72, 0x6f, 0x61, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x65, 0x61, 0x6e, 0x52, 0x6f, 0x61, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x48, 0x12, 0x52, 0x10, 0x62, 0x65, 0x61, 0x6e, 0x52, 0x6f,
	0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a,
	0x16, 0x62, 0x65, 0x61, 0x6e, 0x5f, 0x72, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x65, 0x61, 0x6e, 0x52, 0x6f, 0x61, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x13, 0x52, 0x14, 0x62,
	0x65, 0x61, 0x6e, 0x52, 0x6f, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x71, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x48, 0x15, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75,
	0x72, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x16, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x75, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49,
	0x43, 0x75, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x17, 0x52, 0x07, 0x63, 0x75, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x75, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x48, 0x18, 0x52,
	0x0c, 0x63, 0x75, 0x70, 0x70, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x75, 0x79, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x72, 0x6f, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x6f, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x72, 0x6f, 0x61, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x6f, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x65, 0x61, 0x6e,
	0x4d, 0x69, 0x78, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x75, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x66,
	0x66, 0x65, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x61, 0x6e, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x62, 0x65, 0x61, 0x6e, 0x5f, 0x72, 0x6f, 0x61, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x62, 0x65,
	0x61, 0x6e, 0x5f, 0x72, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x71, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x75,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x70, 0x70, 0x65, 0x64,
	0x5f, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x22, 0x43, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x75,
	0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xdd, 0x04, 0x0a,
	0x0f, 0x42, 0x65, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x66, 0x61, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x66, 0x61,
	0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x66, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x68,
	0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x0f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x6f, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x08, 0x66, 0x6f, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66,
	0x61, 0x72, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x66, 0x6f, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x95, 0x06, 0x0a,
	0x14, 0x42, 0x65, 0x61, 0x6e, 0x52, 0x6f, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0b, 0x72,
	0x6f, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x72, 0x6f, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x72, 0x6f, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x67,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x65, 0x61, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x0f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x42,
	0x65, 0x61, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13,
	0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x12, 0x6f, 0x75, 0x74,
	0x73, 0x69, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x62, 0x65, 0x61, 0x6e, 0x55, 0x75,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x07, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x72, 0x61, 0x63, 0x6b, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x15, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x43, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f,
	0x63, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x09, 0x52, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43, 0x72, 0x61, 0x63,
	0x6b, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x16,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x72, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x72, 0x6f, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x65,
	0x61, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x62, 0x65, 0x61, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x72, 0x61, 0x63, 0x6b,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x5f, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xb0, 0x04, 0x0a, 0x08, 0x49, 0x43, 0x75, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x72, 0x79, 0x46,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x77,
	0x65, 0x74, 0x5f, 0x61, 0x72, 0x6f, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01,
	0x52, 0x08, 0x77, 0x65, 0x74, 0x41, 0x72, 0x6f, 0x6d, 0x61, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x02, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x03, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x09, 0x73, 0x77, 0x65, 0x65,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6c, 0x65, 0x61,
	0x6e, 0x5f, 0x63, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x07, 0x52, 0x08, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x43, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x08,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x63, 0x75, 0x70, 0x70, 0x65, 0x72, 0x73, 0x5f,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x0a, 0x52, 0x11, 0x63, 0x75, 0x70, 0x70, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x72, 0x79,
	0x5f, 0x66, 0x72, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x77,
	0x65, 0x74, 0x5f, 0x61, 0x72, 0x6f, 0x6d, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x77, 0x65, 0x65, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x63,
	0x75, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74,
	0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x74, 0x79,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x75, 0x70, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x07, 0x49, 0x46, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x11,
	0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x2a, 0xa6, 0x02, 0x0a, 0x05, 0x52, 0x6f, 0x61,
	0x73, 0x74, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x4f,
	0x41, 0x53, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x49, 0x4e, 0x4e, 0x41, 0x4d, 0x4f,
	0x4e, 0x5f, 0x52, 0x4f, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4d, 0x45,
	0x52, 0x49, 0x43, 0x41, 0x4e, 0x5f, 0x52, 0x4f, 0x41, 0x53, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x4e, 0x45, 0x57, 0x5f, 0x45, 0x4e, 0x47, 0x4c, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x41,
	0x53, 0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x43, 0x49, 0x54,
	0x59, 0x5f, 0x52, 0x4f, 0x41, 0x53, 0x54, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x44,
	0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x52, 0x4f, 0x41, 0x53,
	0x54, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x4f, 0x41, 0x53,
	0x54, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x4c, 0x55, 0x53,
	0x5f, 0x52, 0x4f, 0x41, 0x53, 0x54, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x55, 0x4c, 0x4c,
	0x5f, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x4f, 0x41, 0x53, 0x54, 0x10, 0x08, 0x12, 0x18, 0x0a,
	0x14, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f,
	0x52, 0x4f, 0x41, 0x53, 0x54, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x54, 0x41, 0x4c, 0x49,
	0x41, 0x4e, 0x5f, 0x52, 0x4f, 0x41, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x49,
	0x45, 0x41, 0x4e, 0x4e, 0x41, 0x5f, 0x52, 0x4f, 0x41, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x10, 0x0a,
	0x0c, 0x46, 0x52, 0x45, 0x4e, 0x43, 0x48, 0x5f, 0x52, 0x4f, 0x41, 0x53, 0x54, 0x10, 0x0c, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x4f, 0x41, 0x53, 0x54, 0x10,
	0x0d, 0x2a, 0x3d, 0x0a, 0x07, 0x42, 0x65, 0x61, 0x6e, 0x4d, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x10,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x42, 0x45, 0x41, 0x4e, 0x5f, 0x4d, 0x49, 0x58,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x49,
	0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x10, 0x02,
	0x2a, 0x56, 0x0a, 0x10, 0x42, 0x65, 0x61, 0x6e, 0x52, 0x6f, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x42, 0x45, 0x41, 0x4e, 0x5f, 0x52, 0x4f, 0x41, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x53, 0x50, 0x52, 0x45, 0x53, 0x53, 0x4f, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x4f, 0x4d, 0x4e, 0x49, 0x10, 0x03, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_bean_proto_rawDescOnce sync.Once
	file_protos_bean_proto_rawDescData = file_protos_bean_proto_rawDesc
)

func file_protos_bean_proto_rawDescGZIP() []byte {
	file_protos_bean_proto_rawDescOnce.Do(func() {
		file_protos_bean_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_bean_proto_rawDescData)
	})
	return file_protos_bean_proto_rawDescData
}

var file_protos_bean_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protos_bean_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_protos_bean_proto_goTypes = []interface{}{
	(Roast)(0),                   // 0: protos.Roast
	(BeanMix)(0),                 // 1: protos.BeanMix
	(BeanRoastingType)(0),        // 2: protos.BeanRoastingType
	(*BeanProto)(nil),            // 3: protos.BeanProto
	(*Config)(nil),               // 4: protos.Config
	(*BeanInformation)(nil),      // 5: protos.BeanInformation
	(*BeanRoastInformation)(nil), // 6: protos.BeanRoastInformation
	(*ICupping)(nil),             // 7: protos.ICupping
	(*IFlavor)(nil),              // 8: protos.IFlavor
}
var file_protos_bean_proto_depIdxs = []int32{
	4, // 0: protos.BeanProto.config:type_name -> protos.Config
	0, // 1: protos.BeanProto.roast:type_name -> protos.Roast
	1, // 2: protos.BeanProto.beanMix:type_name -> protos.BeanMix
	5, // 3: protos.BeanProto.bean_information:type_name -> protos.BeanInformation
	2, // 4: protos.BeanProto.bean_roasting_type:type_name -> protos.BeanRoastingType
	6, // 5: protos.BeanProto.bean_roast_information:type_name -> protos.BeanRoastInformation
	7, // 6: protos.BeanProto.cupping:type_name -> protos.ICupping
	8, // 7: protos.BeanProto.cupped_flavor:type_name -> protos.IFlavor
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_protos_bean_proto_init() }
func file_protos_bean_proto_init() {
	if File_protos_bean_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_bean_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeanProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_bean_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_bean_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeanInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_bean_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeanRoastInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_bean_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICupping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_bean_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IFlavor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_bean_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_protos_bean_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_protos_bean_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_protos_bean_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_bean_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_bean_proto_goTypes,
		DependencyIndexes: file_protos_bean_proto_depIdxs,
		EnumInfos:         file_protos_bean_proto_enumTypes,
		MessageInfos:      file_protos_bean_proto_msgTypes,
	}.Build()
	File_protos_bean_proto = out.File
	file_protos_bean_proto_rawDesc = nil
	file_protos_bean_proto_goTypes = nil
	file_protos_bean_proto_depIdxs = nil
}
